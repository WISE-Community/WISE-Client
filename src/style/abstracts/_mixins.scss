@use 'sass:map';
@use '@angular/material' as mat;
@use 'style/base/typography';

// Define a custom mixin for common styles
@mixin common-setup() {
  h1, h2, .mat-headline-1, .mat-headline-2, .mat-headline-3, .mat-headline-4 {
    font-family: $heading-font-family
  }

  h1 {
    .mat-icon {
      @include mat-icon-size(mat.font-size($wise-typography, 'headline-5'));
    }
  }

  h2 {
    .mat-icon {
      @include mat-icon-size(mat.font-size($wise-typography, 'headline-6'));
    }
  }

  .mat-headline-4 {
    margin-bottom: 36px;

    .mat-icon {
      @include mat-icon-size(mat.font-size($wise-typography, 'headline-4'));
    }
  }

  .mat-headline-3 {
    margin-bottom: 40px;

    .mat-icon {
      @include mat-icon-size(mat.font-size($wise-typography, 'headline-3'));
    }
  }

  form {
    h1, h2, h3 {
      font-weight: 500;
    }
  }

  .mat-mdc-button, .mat-mdc-raised-button, .mat-mdc-unelevated-button, .mat-mdc-outlined-button {
    min-width: 0;
    text-transform: uppercase;
  }

  .mdc-button {
    padding: 0 16px;
  }

  .mat-mdc-raised-button, .mat-mdc-fab, .mat-mdc-mini-fab {
    &:not(.mat-mdc-icon-button) {
      &:not([class*=mat-elevation-z]) {
        @include mat.elevation(3);
      }
    }

    &[disabled][disabled] {
      box-shadow: none;
    }
  }

  .mat-mdc-standard-chip .mdc-evolution-chip__text-label {
    font-size: mat.font-size($wise-typography, 'button');
  }

  .mat-divider-horizontal {
    margin: 16px 0;
  }

  .mdc-menu-surface.mat-mdc-select-panel {
    margin-top: -2px;
  }

  .mat-mdc-menu-content {
    .mat-divider-horizontal {
      margin: 8px 0;
    }
  }

  .mat-mdc-card {
    border-radius: $card-border-radius;
  }

  .mat-mdc-card-actions {
    padding: 16px;
  }

  /* TODO(mdc-migration): The following rule targets internal classes of card that may no longer apply for the MDC version.*/
  .mat-card--button {
    cursor: pointer;
    border-radius: $button-border-radius;
    @include mat.elevation(3);

    &:hover, &:focus {
      @include mat.elevation(4);
    }

    &:hover {
      outline: none;
    }
  }

  .mat-accordion .mat-expansion-panel {
    @include mat.elevation(3);
    @include mat.elevation-transition;

    &.mat-expanded {
      @include mat.elevation(6);
    }

    &:not(.mat-expanded) {
      border-radius: $button-border-radius;

      .mat-expansion-panel-header {
        border-radius: $button-border-radius;
      }
    }
  }

  .mat-expansion-panel-header {
    font-weight: 500;
  }

  .mat-mdc-progress-bar {
    --mdc-linear-progress-active-indicator-height: 12px;
    --mdc-linear-progress-track-height: 12px;
  }

  .mat-mdc-option, .mat-mdc-optgroup-label {
    @include mat.typography-level($wise-typography, 'caption');
  }

  .mdc-text-field {
    &.mdc-text-field--filled {
      border-radius: $card-border-radius;
    }
  }
  /* TODO(mdc-migration): The following rule targets internal classes of tabs that may no longer apply for the MDC version.*/
  .mat-tab-label-active {
    opacity: 1;
  }

  .mat-toolbar {
    @include mat.typography-level($wise-typography, 'subtitle-1');

    h1, h2, h3, h4, h5 ,h6 {
      @include mat.typography-level($wise-typography, 'subtitle-1');
    }
  }

  .mat-toolbar-row, .mat-toolbar-single-row {
    height: $toolbar-height;
  }

  .mat-toolbar-multiple-rows {
    min-height: $toolbar-height;
  }

  .select-panel-full-height {
    max-height: 80vh;
  }

  img[snip] {
    cursor: pointer;
  }
}

.has-icon-badge {
  .mat-badge-content {
    font-family: 'Material Icons';
  }
}

// Define a custom mixin that takes in the current material theme and colors
@mixin theme-setup($theme, $colors) {
  a {
    &:not(.mat-mdc-button):not(.mat-mdc-raised-button):not(.mat-mdc-menu-item):not(.mat-mdc-unelevated-button):not(.mat-mdc-outlined-button):not(.mat-mdc-icon-button):not(.mat-mdc-tab-link) {
      color: map.get($colors, 'primary');

      // Set classes for each named color in the $colors map
      @each $key, $value in $colors {
        &.#{$key} {
          color: $value;
        }
      }
    }
  }

  a.active {
    color: map.get($colors, 'primary');
  }

  .app-background {
    background-color: map.get($colors, 'app-bg');
  }

  .app-bar {
    background-color: map.get($background, 'app-bar');
  }

  .avatar--icon {
    background-color: map.get($colors, disabled-text);
  }

  .content-block, .info-block, .notice {
    background-color: map.get($colors, notice-bg);
  }

  .content-block__title {
    border-color: map.get($background, 'focused-button');
  }

  .cta__headline {
    border-color: map.get($colors, 'notice-bg');
  }

  .cta__wrap, .blurb {
    background-color: map.get($background, 'card');
  }

  .can-highlight {
    transition: 1s background-color;
  }

  .mat-mdc-unelevated-button, .mat-mdc-raised-button, .mat-mdc-fab, .mat-mdc-mini-fab {
    &.mat-secondary-text {
      background-color: map.get($foreground, 'secondary-text');
      color: white;
    }

    &.mat-success {
      background-color: map.get($colors, 'success');
      color: map.get($colors, 'success-contrast');
    }

    &.mat-info {
      background-color: map.get($colors, 'info');
      color: map.get($colors, 'info-contrast');
    }
  }

  .dialog-content-scroll {
    background-color: map.get($colors, 'notice-bg');
    border-color: map.get($background, 'background');
  }

  .mat-mdc-menu-item {
    &.active {
      background-color: map.get($background, 'hover');

      .mat-icon {
        color: map.get($colors, 'primary');
      }
    }
  }

  .mdc-text-field {
    &.mdc-text-field--filled {
      .mdc-line-ripple::before {
        border-bottom-color: transparent;
      }
    }
  }
  /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version.*/
  .mat-form-field-prefix, .mat-form-field-suffix {
    color: mat.get-color-from-palette($foreground, 'secondary-text');
  }

  figure {
    &.image {
      border: 1px solid mat.get-color-from-palette($background, 'status-bar');
    }
  }

  // Set classes for each named color in the $colors map
  @each $key, $value in $colors {
      .#{$key} {
        color: $value;
      }

      .#{$key}-bg {
        background-color: $value;
      }

      .#{$key}-border {
        border-color: $value;
      }
  }

  // ng-select
  .ng-select {
    .ng-select-container {
      padding: 0 12px;
      background-color: rgba(0, 0, 0, 0.04);
      border-radius: $card-border-radius;

      .ng-value-container {
        padding: .2875em 0;

        .ng-value {
          margin: 0.21875em 0.4375em 0.21875em 0;
        }

        .ng-input>input {
          height: 100%;
        }
      }

      &.ng-appearance-outline {
        min-height: 56px;

        .ng-placeholder {
          background-color: transparent;
        }

        &:after {
          border-radius: $card-border-radius;
          border: 0 none;
        }

        &:hover:after {
          border-bottom: 1px solid;
        }

        &.ng-has-value {
          .ng-placeholder {
            margin-top: 0.4375em;
          }
        }
      }
    }

    &.ng-select-focused {
      .ng-select-container {
        background-color: rgba(0, 0, 0, 0.08);

        &.ng-appearance-outline {
          &:after {
            border-bottom: 2px solid map.get($colors, 'primary');
          }

          .ng-placeholder {
            color: map.get($colors, 'primary');
            margin-top: 0.4375em;
          }
        }
      }
    }
  }
}

// Set Angular Material icon size
@mixin mat-icon-size($size: 24px) {
  font-size: $size;
  height: $size;
  width: $size;
  line-height: $size;
}

// Set Angular Material icon button size (use mat-icon size as the $size parameter)
@mixin mat-icon-button-size($size: 24px) {
  $button-size: ($size*1) + 24px;
  height: $button-size;
  width: $button-size;
  line-height: $button-size;

  .mat-icon {
    font-size: $size;
    height: $size;
    width: $size;
    line-height: $size;
  }
}

@mixin filled-input-bg($dark: false) {
  @if ($dark) {
    .mdc-text-field--filled {
      &:not(.mdc-text-field--disabled) {
        background-color: rgba(255, 255, 255, 0.1);
      }

      &.mdc-text-field--disabled {
        background-color: rgba(255, 255, 255, 0.08);
      }
    }
  } @else {
    .mdc-text-field--filled {
      &:not(.mdc-text-field--disabled) {
        background-color: rgba(0, 0, 0, 0.04);
      }

      &.mdc-text-field--disabled {
        background-color: rgba(0, 0, 0, 0.02);
      }
    }
  }
}
